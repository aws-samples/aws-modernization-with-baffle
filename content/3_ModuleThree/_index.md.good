---
title: "Lab 2 - No-code Application Encryption and Dynamic Masking" # MODIFY THIS TITLE IF APPLICABLE
chapter: true
weight: 4 
---

# Lab 2 - No-code Application Encryption and Dynamic Masking <!-- MODIFY THIS HEADING -->

## Scenario
The AppDev team is making good progress and is ready to stage a modernized version of the application in AWS. While you’ve been able to rely on static masking in the test/dev environments to protect regulated data, you realized the applications need to run SQL operations against real data values to work properly. InfoSec flags the weakened security posture as a blocking issue. In the on-prem Oracle DB, you’ve been able to rely on features like TDE and Database vault to meet the encryption and privileged user access control compliance requirements mandated by regulations like PCI DSS, but PostgreSQL do not have these features available. So, you decide to make use of Baffle’s Real Queryable Encryption to meet these compliance requirements.

## Goals for this lab
After completing this lab, you will have a PostgreSQL database with sensitive data columns encrypted using Baffle's RQE. You will be able to run the demo application and see it work just as before. But, when you try to connect as a DBA either directly in the DB or through Baffle Shield, you will only see encrypted or masked valued for the sensitive data columns. This demonstrates Baffle's unique  privileged user access control capabilities not available in other databases.

## Brief overview of submodule one.

![DynamicMasking](../images/DynamicMaskingDiag.png)

- Verify installation

- Enable data protection polices

- Encrypt existing data using Baffle's migration feature

- Verify the sample application works as before

- Verify DBA does not have access to sensitive data value



{{% notice warning %}}
The examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various AWS services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments.
{{% /notice %}}
